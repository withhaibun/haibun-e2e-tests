import { Feature, Scenario, Backgrounds } from '@haibun/features';

const v = {
  REST_Home_Page: 'http://localhost:8123',
  Profile_Path: "/me",
  Token_Path: "/token",
  Resources_Path: "/api/resources",
  Resource_Path: "/api/resource",
  Resource_Delete_Route: "/api/resource/:id",
  REST_Home: `${v.REST_Home_Page}/static/rest.html`,
  Logout_Path: "/logout",
  Profile_API: `${v.REST_Home_Page}/me`,
  Authorization_Server: `${v.REST_Home_Page}/token`,
  Logout: `${v.REST_Home_Page}/logout?post_logout_redirect_uri=${v.REST_Home_Page}/static/loggedOut`,
  Resources_API: `${v.REST_Home_Page}/api/resources`,
  Resource_API: `${v.REST_Home_Page}/api/resource`,
  Resource_Delete_API: `${v.REST_Home_Page}/api/resource/:id`,
  OK: 200,
  Unauthorized: 401,
  testtoken: "test-token",
  Resource_Server: 'http://localhost:8123'
};

export const authFeature = Feature('Authentication', {
  [Scenario('setup')]: [
    `Set Resource Server to ${v.REST_Home_Page}`,
    `Set Profile Path to ${v.Profile_Path}`,
    `Set Token Path to ${v.Token_Path}`,
    `Set Resources Path to ${v.Resources_Path}`,
    `Set Resource Path to ${v.Resource_Path}`,
    `Combine Resource Path and "/:id" as Resource Delete Route`,
    `Combine Resource Server and "/static/rest.html" as REST Home`,
    `Set Logout Path to ${v.Logout_Path}`,
    `Start check auth token route at ${v.Profile_API}`,
    `Start create auth token route at ${v.Token_Path}`,
    `Start logout auth token route at ${v.Logout_Path}`,
    `Start resources route at ${v.Resources_Path}`,
    `Start resource get route at ${v.Resource_Path}`,
    `Start resource delete route at ${v.Resource_Delete_Route}`,
    `Combine Resource Server and ${v.Token_Path} as Authorization Server`,
    `Combine Resource Server and ${v.Profile_Path} as Profile API`,
    `Combine Resource Server and ${v.Resources_Path} as Resources API`,
    `Combine Resource Server and ${v.Resource_Path} as Resource API`,
    `Combine Resource Server and ${v.Resource_Delete_Route} as Resource Delete API`,
    `Combine Resource Server and "/logout?post_logout_redirect_uri=http://localhost:8123/static/loggedOut" as ${v.Logout}`,
    `Set ${v.OK} to 200`,
    `Set ${v.Unauthorized} to 401`,
    `Serve files at /static from "rest"`,
  ],
  [Scenario('Fail authentication')]: [
    `Go to the ${v.REST_Home_Page} webpage`,
    `Make an HTTP GET to ${v.Profile_API}`,
    `HTTP status is ${v.Unauthorized}`,
  ],
  [Scenario('Check pre-existing authentication token')]: [
    `Set ${v.testtoken} to "test-token"`,
    `Change server auth token to ${v.testtoken}`,
    `Use Authorization Bearer header with ${v.testtoken}`,
    `Make an HTTP GET to ${v.Resources_API}`,
    `HTTP status is ${v.OK}`,
  ],
  [Scenario('Create authentication token')]: [
    `Request OAuth 2.0 access token from ${v.Authorization_Server}`,
    `HTTP status is ${v.OK}`,
    `HTTP response property "access_token" is "newToken"`,
    `Make an HTTP GET to ${v.Profile_API}`,
    `HTTP status is ${v.OK}`,
  ],
  [Scenario('Logout authentication token')]: [
    `Perform OAuth 2.0 logout from ${v.Logout}`,
    `Make an HTTP GET to ${v.Profile_API}`,
    `HTTP status is ${v.Unauthorized}`,
  ],
  [Scenario('Filter list of resouces')]: [
    `Request OAuth 2.0 access token from ${v.Authorization_Server}`,
    `HTTP status is ${v.OK}`,
    `Make an HTTP GET to ${v.Resources_API}`,
    `JSON response length is 3`,
    `Filter JSON response by "name" matching "Include"`,
    `Filtered response length is 2`,
    `For each filtered id, make REST DELETE to ${v.Resource_API} yielding status 204`,
    `Make an HTTP GET to ${v.Resources_API}`,
    `JSON response length is 1`,
  ],
});